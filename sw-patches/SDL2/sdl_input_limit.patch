diff --git a/src/core/linux/SDL_evdev_capabilities.c b/src/core/linux/SDL_evdev_capabilities.c
index 1a04f6b59..de80384bf 100644
--- a/src/core/linux/SDL_evdev_capabilities.c
+++ b/src/core/linux/SDL_evdev_capabilities.c
@@ -40,7 +40,7 @@ extern int
 SDL_EVDEV_GuessDeviceClass(const unsigned long bitmask_props[NBITS(INPUT_PROP_MAX)],
                            const unsigned long bitmask_ev[NBITS(EV_MAX)],
                            const unsigned long bitmask_abs[NBITS(ABS_MAX)],
-                           const unsigned long bitmask_key[NBITS(KEY_MAX)],
+                           const unsigned long bitmask_key[NBITS(0x4ff)],
                            const unsigned long bitmask_rel[NBITS(REL_MAX)])
 {
     struct range
diff --git a/src/core/linux/SDL_evdev_capabilities.h b/src/core/linux/SDL_evdev_capabilities.h
index 57667d257..2a1ec7a24 100644
--- a/src/core/linux/SDL_evdev_capabilities.h
+++ b/src/core/linux/SDL_evdev_capabilities.h
@@ -68,7 +68,7 @@ typedef enum
 extern int SDL_EVDEV_GuessDeviceClass(const unsigned long bitmask_props[NBITS(INPUT_PROP_MAX)],
                                       const unsigned long bitmask_ev[NBITS(EV_MAX)],
                                       const unsigned long bitmask_abs[NBITS(ABS_MAX)],
-                                      const unsigned long bitmask_key[NBITS(KEY_MAX)],
+                                      const unsigned long bitmask_key[NBITS(0x4ff)],
                                       const unsigned long bitmask_rel[NBITS(REL_MAX)]);
 
 #endif // HAVE_LINUX_INPUT_H
diff --git a/src/core/linux/SDL_udev.c b/src/core/linux/SDL_udev.c
index ada5a26b7..355cd77e3 100644
--- a/src/core/linux/SDL_udev.c
+++ b/src/core/linux/SDL_udev.c
@@ -372,7 +372,7 @@ static int guess_device_class(struct udev_device *dev)
     unsigned long bitmask_props[NBITS(INPUT_PROP_MAX)];
     unsigned long bitmask_ev[NBITS(EV_MAX)];
     unsigned long bitmask_abs[NBITS(ABS_MAX)];
-    unsigned long bitmask_key[NBITS(KEY_MAX)];
+    unsigned long bitmask_key[NBITS(0x4ff)];
     unsigned long bitmask_rel[NBITS(REL_MAX)];
 
     /* walk up the parental chain until we find the real input device; the
diff --git a/src/joystick/linux/SDL_sysjoystick.c b/src/joystick/linux/SDL_sysjoystick.c
index 1e85eac2f..a37b95a93 100644
--- a/src/joystick/linux/SDL_sysjoystick.c
+++ b/src/joystick/linux/SDL_sysjoystick.c
@@ -189,7 +189,7 @@ static void FixupDeviceInfoForMapping(int fd, struct input_id *inpid)
 {
     if (inpid->vendor == 0x045e && inpid->product == 0x0b05 && inpid->version == 0x0903) {
         // This is a Microsoft Xbox One Elite Series 2 controller
-        unsigned long keybit[NBITS(KEY_MAX)] = { 0 };
+        unsigned long keybit[NBITS(0x4ff)] = { 0 };
 
         // The first version of the firmware duplicated all the inputs
         if ((ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(keybit)), keybit) >= 0) &&
@@ -240,7 +240,7 @@ static int GuessDeviceClass(int fd)
 {
     unsigned long propbit[NBITS(INPUT_PROP_MAX)] = { 0 };
     unsigned long evbit[NBITS(EV_MAX)] = { 0 };
-    unsigned long keybit[NBITS(KEY_MAX)] = { 0 };
+    unsigned long keybit[NBITS(0x4ff)] = { 0 };
     unsigned long absbit[NBITS(ABS_MAX)] = { 0 };
     unsigned long relbit[NBITS(REL_MAX)] = { 0 };
 
@@ -1254,7 +1254,7 @@ static bool GuessIfAxesAreDigitalHat(struct input_absinfo *absinfo_x, struct inp
 static void ConfigJoystick(SDL_Joystick *joystick, int fd, int fd_sensor)
 {
     int i, t;
-    unsigned long keybit[NBITS(KEY_MAX)] = { 0 };
+    unsigned long keybit[NBITS(0x4ff)] = { 0 };
     unsigned long absbit[NBITS(ABS_MAX)] = { 0 };
     unsigned long relbit[NBITS(REL_MAX)] = { 0 };
     unsigned long ffbit[NBITS(FF_MAX)] = { 0 };
@@ -1270,7 +1270,7 @@ static void ConfigJoystick(SDL_Joystick *joystick, int fd, int fd_sensor)
         (ioctl(fd, EVIOCGBIT(EV_REL, sizeof(relbit)), relbit) >= 0)) {
 
         // Get the number of buttons, axes, and other thingamajigs
-        for (i = BTN_JOYSTICK; i < KEY_MAX; ++i) {
+        for (i = BTN_JOYSTICK; i < 0x4ff; ++i) {
             if (test_bit(i, keybit)) {
 #ifdef DEBUG_INPUT_EVENTS
                 SDL_Log("Joystick has button: 0x%x\n", i);
@@ -1382,7 +1382,7 @@ static void ConfigJoystick(SDL_Joystick *joystick, int fd, int fd_sensor)
 
         joystick->hwdata->classic = true;
 
-        len = (KEY_MAX - BTN_MISC + 1) * sizeof(*joystick->hwdata->key_pam);
+        len = (0x4ff - BTN_MISC + 1) * sizeof(*joystick->hwdata->key_pam);
         joystick->hwdata->key_pam = (Uint16 *)SDL_calloc(1, len);
         if (joystick->hwdata->key_pam) {
             if (ioctl(fd, JSIOCGBTNMAP, joystick->hwdata->key_pam, len) < 0) {
@@ -1852,7 +1852,7 @@ static int AxisCorrect(SDL_Joystick *joystick, int which, int value)
 static void PollAllValues(Uint64 timestamp, SDL_Joystick *joystick)
 {
     struct input_absinfo absinfo;
-    unsigned long keyinfo[NBITS(KEY_MAX)];
+    unsigned long keyinfo[NBITS(0x4ff)];
     int i;
 
     SDL_AssertJoysticksLocked();
@@ -1892,7 +1892,7 @@ static void PollAllValues(Uint64 timestamp, SDL_Joystick *joystick)
     // Poll all buttons
     SDL_zeroa(keyinfo);
     if (ioctl(joystick->hwdata->fd, EVIOCGKEY(sizeof(keyinfo)), keyinfo) >= 0) {
-        for (i = 0; i < KEY_MAX; i++) {
+        for (i = 0; i < 0x4ff; i++) {
             if (joystick->hwdata->has_key[i]) {
                 bool down = test_bit(i, keyinfo);
 #ifdef DEBUG_INPUT_EVENTS
diff --git a/src/joystick/linux/SDL_sysjoystick_c.h b/src/joystick/linux/SDL_sysjoystick_c.h
index 517854d6d..baf9df113 100644
--- a/src/joystick/linux/SDL_sysjoystick_c.h
+++ b/src/joystick/linux/SDL_sysjoystick_c.h
@@ -56,9 +56,9 @@ struct joystick_hwdata
     } *hats;
 
     // Support for the Linux 2.4 unified input interface
-    Uint8 key_map[KEY_MAX];
+    Uint8 key_map[0x4ff];
     Uint8 abs_map[ABS_MAX];
-    bool has_key[KEY_MAX];
+    bool has_key[0x4ff];
     bool has_abs[ABS_MAX];
     bool has_accelerometer;
     bool has_gyro;
