From 7bdffbb176c0cbe92f42158975cb52b5387a7daf Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guzm=C3=A1n=20Mart=C3=ADn?= <guzlightyear1994@gmail.com>
Date: Tue, 8 Oct 2024 19:03:23 +0200
Subject: [PATCH] patched to allow for more device inputs

---
 src/core/linux/SDL_evdev_capabilities.c |  2 +-
 src/core/linux/SDL_evdev_capabilities.h |  2 +-
 src/core/linux/SDL_udev.c               |  2 +-
 src/events/scancodes_linux.h            |  2 +-
 src/joystick/linux/SDL_sysjoystick.c    | 14 +++++++-------
 src/joystick/linux/SDL_sysjoystick_c.h  |  4 ++--
 test/testevdev.c                        |  4 ++--
 7 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/src/core/linux/SDL_evdev_capabilities.c b/src/core/linux/SDL_evdev_capabilities.c
index e1b5d74d1..fbba9d0ea 100644
--- a/src/core/linux/SDL_evdev_capabilities.c
+++ b/src/core/linux/SDL_evdev_capabilities.c
@@ -39,7 +39,7 @@
 extern int
 SDL_EVDEV_GuessDeviceClass(const unsigned long bitmask_ev[NBITS(EV_MAX)],
                            const unsigned long bitmask_abs[NBITS(ABS_MAX)],
-                           const unsigned long bitmask_key[NBITS(KEY_MAX)],
+                           const unsigned long bitmask_key[NBITS(0x4ff)],
                            const unsigned long bitmask_rel[NBITS(REL_MAX)])
 {
     struct range
diff --git a/src/core/linux/SDL_evdev_capabilities.h b/src/core/linux/SDL_evdev_capabilities.h
index 8d3830aec..5ac4619e7 100644
--- a/src/core/linux/SDL_evdev_capabilities.h
+++ b/src/core/linux/SDL_evdev_capabilities.h
@@ -49,7 +49,7 @@ typedef enum
 
 extern int SDL_EVDEV_GuessDeviceClass(const unsigned long bitmask_ev[NBITS(EV_MAX)],
                                       const unsigned long bitmask_abs[NBITS(ABS_MAX)],
-                                      const unsigned long bitmask_key[NBITS(KEY_MAX)],
+                                      const unsigned long bitmask_key[NBITS(0x4ff)],
                                       const unsigned long bitmask_rel[NBITS(REL_MAX)]);
 
 #endif /* HAVE_LINUX_INPUT_H */
diff --git a/src/core/linux/SDL_udev.c b/src/core/linux/SDL_udev.c
index 5bdfc0db8..dd81d99e3 100644
--- a/src/core/linux/SDL_udev.c
+++ b/src/core/linux/SDL_udev.c
@@ -378,7 +378,7 @@ static int guess_device_class(struct udev_device *dev)
     struct udev_device *pdev;
     unsigned long bitmask_ev[NBITS(EV_MAX)];
     unsigned long bitmask_abs[NBITS(ABS_MAX)];
-    unsigned long bitmask_key[NBITS(KEY_MAX)];
+    unsigned long bitmask_key[NBITS(0x4ff)];
     unsigned long bitmask_rel[NBITS(REL_MAX)];
 
     /* walk up the parental chain until we find the real input device; the
diff --git a/src/events/scancodes_linux.h b/src/events/scancodes_linux.h
index 03d84a982..b13ddada8 100644
--- a/src/events/scancodes_linux.h
+++ b/src/events/scancodes_linux.h
@@ -794,7 +794,7 @@ static SDL_Scancode const linux_scancode_table[] = {
     /* 764, 0x2fc */    SDL_SCANCODE_UNKNOWN,
     /* 765, 0x2fd */    SDL_SCANCODE_UNKNOWN,
     /* 766, 0x2fe */    SDL_SCANCODE_UNKNOWN,
-    /* 767, 0x2ff */    SDL_SCANCODE_UNKNOWN,            /* KEY_MAX */
+    /* 767, 0x2ff */    SDL_SCANCODE_UNKNOWN,            /* 0x4ff */
 #endif /* 0 */
 };
 
diff --git a/src/joystick/linux/SDL_sysjoystick.c b/src/joystick/linux/SDL_sysjoystick.c
index bb7c31ced..225630f3c 100644
--- a/src/joystick/linux/SDL_sysjoystick.c
+++ b/src/joystick/linux/SDL_sysjoystick.c
@@ -191,7 +191,7 @@ static void FixupDeviceInfoForMapping(int fd, struct input_id *inpid)
 {
     if (inpid->vendor == 0x045e && inpid->product == 0x0b05 && inpid->version == 0x0903) {
         /* This is a Microsoft Xbox One Elite Series 2 controller */
-        unsigned long keybit[NBITS(KEY_MAX)] = { 0 };
+        unsigned long keybit[NBITS(0x4ff)] = { 0 };
 
         /* The first version of the firmware duplicated all the inputs */
         if ((ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(keybit)), keybit) >= 0) &&
@@ -241,7 +241,7 @@ static SDL_bool GetSteamVirtualGamepadSlot(int fd, int *slot)
 static int GuessDeviceClass(int fd)
 {
     unsigned long evbit[NBITS(EV_MAX)] = { 0 };
-    unsigned long keybit[NBITS(KEY_MAX)] = { 0 };
+    unsigned long keybit[NBITS(0x4ff)] = { 0 };
     unsigned long absbit[NBITS(ABS_MAX)] = { 0 };
     unsigned long relbit[NBITS(REL_MAX)] = { 0 };
 
@@ -1260,7 +1260,7 @@ static SDL_bool GuessIfAxesAreDigitalHat(struct input_absinfo *absinfo_x, struct
 static void ConfigJoystick(SDL_Joystick *joystick, int fd, int fd_sensor)
 {
     int i, t;
-    unsigned long keybit[NBITS(KEY_MAX)] = { 0 };
+    unsigned long keybit[NBITS(0x4ff)] = { 0 };
     unsigned long absbit[NBITS(ABS_MAX)] = { 0 };
     unsigned long relbit[NBITS(REL_MAX)] = { 0 };
     unsigned long ffbit[NBITS(FF_MAX)] = { 0 };
@@ -1276,7 +1276,7 @@ static void ConfigJoystick(SDL_Joystick *joystick, int fd, int fd_sensor)
         (ioctl(fd, EVIOCGBIT(EV_REL, sizeof(relbit)), relbit) >= 0)) {
 
         /* Get the number of buttons, axes, and other thingamajigs */
-        for (i = BTN_JOYSTICK; i < KEY_MAX; ++i) {
+        for (i = BTN_JOYSTICK; i < 0x4ff; ++i) {
             if (test_bit(i, keybit)) {
 #ifdef DEBUG_INPUT_EVENTS
                 SDL_Log("Joystick has button: 0x%x\n", i);
@@ -1388,7 +1388,7 @@ static void ConfigJoystick(SDL_Joystick *joystick, int fd, int fd_sensor)
 
         joystick->hwdata->classic = SDL_TRUE;
 
-        len = (KEY_MAX - BTN_MISC + 1) * sizeof(*joystick->hwdata->key_pam);
+        len = (0x4ff - BTN_MISC + 1) * sizeof(*joystick->hwdata->key_pam);
         joystick->hwdata->key_pam = (Uint16 *)SDL_calloc(1, len);
         if (joystick->hwdata->key_pam) {
             if (ioctl(fd, JSIOCGBTNMAP, joystick->hwdata->key_pam, len) < 0) {
@@ -1876,7 +1876,7 @@ static int AxisCorrect(SDL_Joystick *joystick, int which, int value)
 static void PollAllValues(SDL_Joystick *joystick)
 {
     struct input_absinfo absinfo;
-    unsigned long keyinfo[NBITS(KEY_MAX)];
+    unsigned long keyinfo[NBITS(0x4ff)];
     int i;
 
     SDL_AssertJoysticksLocked();
@@ -1916,7 +1916,7 @@ static void PollAllValues(SDL_Joystick *joystick)
     /* Poll all buttons */
     SDL_zeroa(keyinfo);
     if (ioctl(joystick->hwdata->fd, EVIOCGKEY(sizeof(keyinfo)), keyinfo) >= 0) {
-        for (i = 0; i < KEY_MAX; i++) {
+        for (i = 0; i < 0x4ff; i++) {
             if (joystick->hwdata->has_key[i]) {
                 const Uint8 value = test_bit(i, keyinfo) ? SDL_PRESSED : SDL_RELEASED;
 #ifdef DEBUG_INPUT_EVENTS
diff --git a/src/joystick/linux/SDL_sysjoystick_c.h b/src/joystick/linux/SDL_sysjoystick_c.h
index 6d6ee69ab..4291d9820 100644
--- a/src/joystick/linux/SDL_sysjoystick_c.h
+++ b/src/joystick/linux/SDL_sysjoystick_c.h
@@ -55,9 +55,9 @@ struct joystick_hwdata
     } *balls;
 
     /* Support for the Linux 2.4 unified input interface */
-    Uint8 key_map[KEY_MAX];
+    Uint8 key_map[0x4ff];
     Uint8 abs_map[ABS_MAX];
-    SDL_bool has_key[KEY_MAX];
+    SDL_bool has_key[0x4ff];
     SDL_bool has_abs[ABS_MAX];
     SDL_bool has_accelerometer;
     SDL_bool has_gyro;
diff --git a/test/testevdev.c b/test/testevdev.c
index 67124ae0f..ea91455e1 100644
--- a/test/testevdev.c
+++ b/test/testevdev.c
@@ -55,7 +55,7 @@ typedef struct
     uint16_t product_id;
     uint16_t version;
     uint8_t ev[(EV_MAX + 1) / 8];
-    uint8_t keys[(KEY_MAX + 1) / 8];
+    uint8_t keys[(0x4ff + 1) / 8];
     uint8_t abs[(ABS_MAX + 1) / 8];
     uint8_t rel[(REL_MAX + 1) / 8];
     uint8_t ff[(FF_MAX + 1) / 8];
@@ -969,7 +969,7 @@ run_test(void)
         {
             unsigned long ev[NBITS(EV_MAX)];
             unsigned long abs[NBITS(ABS_MAX)];
-            unsigned long keys[NBITS(KEY_MAX)];
+            unsigned long keys[NBITS(0x4ff)];
             unsigned long rel[NBITS(REL_MAX)];
         } caps = {};
 
-- 
2.46.0
